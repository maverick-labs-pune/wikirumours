"""
Django settings for wikirumours project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
from pathlib import Path
import os
import dotenv  # <- New
from django.contrib.admin.sites import  AdminSite
# Build paths inside the project like this: BASE_DIR / 'subdir'.

BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# Add .env variables anywhere before SECRET_KEY
dotenv_file = os.path.join(BASE_DIR, ".env")
if os.path.isfile(dotenv_file):
    dotenv.load_dotenv(dotenv_file)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False


ALLOWED_HOSTS = [
    "localhost",
    "*",
    "a.localhost",
    "b.localhost",
]

# Application definition
INSTALLED_APPS = [
    # "api.apps.ApiConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.gis",
    "mapwidgets",
    "tailwind",
    "theme",
    "report",
    "chat",
    "newapi",
    "rest_framework",
    "django_rest_passwordreset",
    "django_filters",
    "users",
    "location_field.apps.DefaultConfig",
    "countries",
    "modelcluster",
    "users.apps.WikirumoursTaggitConfig",
    "articles",
    "drf_yasg",
    "admin_auto_filters",
    "taggit_selectize",
    "colorfield",
    "loginas",
    'dbbackup',
    'logs',
    'fcm_django',
    'django_crontab',
]

CRONJOBS = [
    ('0 0 * * 0', 'report.cron.InactiveAlert', '>> /home/mavericklabs/wikirumours.org/wikirumours/file.log')
]

CRONTAB_COMMAND_SUFFIX = '2>&1'

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "wikirumours.middleware.DomainCheckMiddleware",
    "wikirumours.middleware.BlacklistIPMiddleware",
    "django.middleware.locale.LocaleMiddleware",
]

ROOT_URLCONF = "wikirumours.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "wikirumours.wsgi.application"
STATIC_ROOT = "static"

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.mysql",
        "NAME": os.environ["DATABASE_NAME"],
        "USER": os.environ["DATABASE_USER"],
        "PASSWORD": os.environ["DATABASE_PASSWORD"],
        "HOST": os.environ["DATABASE_HOST"],
        "PORT": os.environ["DATABASE_PORT"],
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# REST_FRAMEWORK = {
#     'DEFAULT_RENDERER_CLASSES': (
#         'rest_framework.renderers.JSONRenderer',
#     ),
#     # 'DEFAULT_PERMISSION_CLASSES': (
#     #     'rest_framework.permissions.IsAuthenticatedOrReadOnly',
#     # ),
#     'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
#     'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
#     'PAGE_SIZE': 1,
# }

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS':(
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
}

FCM_DJANGO_SETTINGS = {
        "FCM_SERVER_KEY": os.environ["FCM_SERVER_KEY"],
        "DELETE_INACTIVE_DEVICES": False,
}

LANGUAGE_CODE = "en"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"
TAILWIND_APP_NAME = "theme"

AUTH_USER_MODEL = "users.User"

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(os.path.dirname(__file__), "", "media")

LANGUAGES = [
    ("hi", "Hindi"),
    ("en", "English"),
]

LOCALE_PATHS = (os.path.join(os.path.dirname(os.path.dirname(__file__)), "locale"),)

LOGIN_URL = "/login"

LOCATION_FIELD_PATH = STATIC_URL + "location_field"

LOCATION_FIELD = {
    "map.provider": "google",
    "map.zoom": 13,
    "search.provider": "google",
    "search.suffix": "",
    "provider.google.api": "//maps.google.com/maps/api/js?sensor=false",
    "provider.google.api_key": "",
    "provider.google.api_libraries": "",
    "provider.google.map.type": "ROADMAP",
}

GOOGLE_MAPS_KEY = os.environ["GOOGLE_MAP_API_KEY"]
MAPBOX_API_KEY = os.environ["MAPBOX_API_KEY"]
MAP_WIDGETS = {
    "GooglePointFieldWidget": (("markerFitZoom", 12),),
    "GOOGLE_MAP_API_KEY": GOOGLE_MAPS_KEY,
}


TAGGIT_TAGS_FROM_STRING = "taggit_selectize.utils.parse_tags"
TAGGIT_STRING_FROM_TAGS = "taggit_selectize.utils.join_tags"

EMAIL_HOST = os.environ.get("EMAIL_HOST", "")
EMAIL_PORT = os.environ.get("EMAIL_PORT", "")
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "")
EMAIL_USE_SSL = True


DATETIME_FORMAT = 'N j Y P'
DATE_FORMAT = 'N j Y P'



CELERY_BROKER_URL = 'redis://'+os.environ.get("REDIS_IP", "")+':6379'
CELERY_RESULT_BACKEND = 'redis://'+os.environ.get("REDIS_IP", "")+':6379'
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json', 'application/text']
CELERY_TIMEZONE = TIME_ZONE
CELERY_WORKER_MAX_TASKS_PER_CHILD = 100


DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_STORAGE_OPTIONS = {'location': os.path.join(BASE_DIR, '../backups')}


from celery.schedules import crontab
CELERY_BEAT_SCHEDULE = {
    'regular-database-backup': {
        'task': 'users.tasks.regular_database_backup',
        'schedule': crontab(minute=55, hour=23),
    },
}

AdminSite.enable_nav_sidebar = True


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'cache_table',
    }
}

MAX_ALLOWED_HITS_PER_IP = 5 
IP_HITS_TIMEOUT = 30  
